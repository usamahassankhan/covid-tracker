{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","image/image.png","App.js","index.js","App.module.css","components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","Container","Grid","container","spacing","justify","item","component","Card","xs","md","cx","card","infacted","CardContent","Typography","color","gutterBottm","variant","start","end","value","duration","seperator","Date","toDateString","url","fetchData","country","a","changableurl","axios","get","modifiedData","console","log","fetchDailyData","map","dailyData","total","date","reportDate","fetchcountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","text","CountryPicker","handleCountryChange","fetchedCountries","setfetchedCountries","FormControl","formControler","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchdata","setState","this","image","src","coronaImage","alt","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c14f0aac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Cards_Container__26V6b\",\"card\":\"Cards_card__1cfxt\",\"infacted\":\"Cards_infacted__3vB5a\",\"recovered\":\"Cards_recovered__1lIrU\",\"deaths\":\"Cards_deaths__2e4MB\"};","import React from 'react'\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\nconst Cards = ({data:{confirmed,recovered,deaths,lastUpdate}}) => {\r\n    if(!confirmed){\r\n    return \"loading... \"\r\n}\r\n\r\nreturn (\r\n\r\n    <div className={styles.Container}>\r\n<Grid container spacing={3} justify=\"center\">\r\n    <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.infacted)}>\r\n        <CardContent>\r\n            <Typography color=\" textSecondary\" gutterBottm >Infacted </Typography>\r\n            <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={15.5} seperator=\",\"/></Typography>\r\n        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n        <Typography variant=\"body2\">Number of active cases of Covid -19</Typography>\r\n        </CardContent>\r\n    </Grid>\r\n\r\n  <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.recovered)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottm >Recovered </Typography>\r\n            <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={15.5} seperator=\",\"/></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n        <Typography variant=\"body2\">Number of Recovered cases from Covid -19</Typography>\r\n        </CardContent>\r\n    </Grid>\r\n    <Grid item component={Card}  xs={12} md={3} className={cx(styles.card,styles.deaths)}>\r\n        <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottm >Death</Typography>\r\n            <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={15.5} seperator=\",\"/></Typography>\r\n            <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n        <Typography variant=\"body2\">Number of death cases of Covid -19</Typography>\r\n        </CardContent>\r\n    </Grid> \r\n\r\n</Grid>\r\n    </div>        \r\n       \r\n    )\r\n}\r\n\r\nexport default Cards;","import axios from 'axios';\r\nconst url=\"https://covid19.mathdro.id/api\";\r\nexport const fetchData=async(country)=>{\r\nlet changableurl=url;\r\nif(country){\r\nchangableurl=`${url}/countries/${country}`\r\n}\r\n    try{\r\nconst {data}=await axios.get(changableurl);\r\n const modifiedData={\r\n     confirmed:data.confirmed,\r\n     recovered:data.recovered,\r\n     deaths:data.deaths,\r\n     lastUpdate:data.lastUpdate,\r\n }\r\nreturn modifiedData;\r\n}catch(error){\r\nconsole.log(\"error\");\r\n}\r\n}\r\nexport const fetchDailyData=async()=>{\r\n    try{\r\n        const {data}=await axios.get(`${url}/daily`);\r\n         const modifiedData=data.map((dailyData)=>({\r\n             confirmed:dailyData.confirmed.total,\r\n             deaths:dailyData.deaths.total,\r\n             date:dailyData.reportDate,\r\n\r\n         }));\r\n    \r\n         return modifiedData;}\r\n    catch(error){\r\n        console.log(\"error\");\r\n\r\n    }\r\n}\r\nexport const fetchcountries=async()=>{\r\ntry{\r\nconst {data:{countries}} =await axios.get(`${url}/countries`);\r\nreturn countries.map((country)=>country.name);\r\n }   \r\ncatch(error){\r\nconsole.log(error);\r\n} \r\n}","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api/index';\r\nimport styles from './Chart.module.css';\r\nimport  {Line,Bar}from 'react-chartjs-2';  \r\nconst Chart = ({data,country}) => {\r\nconst [dailyData,setDailyData]=useState([]);\r\nuseEffect(()=>{\r\n    const fetchAPI=async()=>{\r\n        setDailyData(await fetchDailyData());  \r\n    }\r\n    console.log(dailyData);\r\n    fetchAPI();\r\n},[]);\r\nconst lineChart=( \r\n    dailyData.length\r\n    ?(\r\n<Line\r\ndata={{\r\n    labels:dailyData.map(({date})=>date),\r\n    datasets:[{\r\n        data:dailyData.map(({confirmed})=>confirmed),\r\n         label:\"Infacted\",\r\n         borderColor:'#3333ff',\r\n         fill:true,\r\n    },{data:dailyData.map(({deaths})=>deaths),\r\n    label:\"Deaths\",\r\n    borderColor:'red',\r\n    backgroundColor:'rgba(255,0,0,0.5)',\r\n    fill:true,}], \r\n}}/>) \r\n:null\r\n    );\r\nconst barChart=(\r\n    data.confirmed ?(\r\n<Bar\r\ndata={{\r\nlabels:['infacted','Recovered','Deaths'],\r\ndatasets:[{\r\n    label:'People',\r\n    backgroundColor:\r\n    ['rgba(0,0,255,0.5)',\r\n     'rgba(0,255,0,0.5)',\r\n      'rgba(255,0,0,0.5)'],\r\n      data:[data.confirmed.value,data.recovered.value,data.deaths.value]\r\n}]\r\n}}\r\noptions={{\r\n    legend:{display:true,text:`current state in ${country}`},\r\n}}\r\n/>\r\n    ):null\r\n);\r\n\r\nreturn (\r\n<div className={styles.container}>\r\n{country?barChart:lineChart}\r\n</div>\r\n            \r\n       \r\n    )\r\n}\r\nexport default Chart;\r\n","import React,{ useState,useEffect} from 'react';\r\nimport styles from './CountryPicker.module.css';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport {fetchcountries} from \"../../api/index\";\r\nconst CountryPicker = ({handleCountryChange}) => {\r\nconst [fetchedCountries,setfetchedCountries]=useState([]);\r\n    useEffect(()=>{\r\n\r\n    const fetchAPI=async()=>{\r\nsetfetchedCountries(await fetchcountries());\r\n    }\r\n    fetchAPI();\r\n},[setfetchedCountries]);\r\nconsole.log(fetchedCountries);\r\n\r\n\r\n    return (\r\n<FormControl className={styles.formControler}>\r\n<NativeSelect defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n   \r\n    <option value=\"global\">Global</option>\r\n    {fetchedCountries.map((country,i)=><option key={i} value={country}>{country}</option>)}\r\n</NativeSelect>\r\n</FormControl>\r\n            \r\n       \r\n    )\r\n}\r\nexport default CountryPicker;\r\n","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","import React, { Component } from 'react'\nimport {Cards,Chart,CountryPicker} from './components';\nimport styles from './App.module.css';\nimport {fetchData} from './api/index';\nimport coronaImage from './image/image.png';\nexport default class App extends Component {\nstate={\n  data:{},\n  country:'',\n}\n  async componentDidMount( ){\n   const fetchdata=await fetchData();\nthis.setState({data:fetchdata});\n  }\n handleCountryChange=async(country)=>{\n  const fetchdata=await fetchData(country);\nthis.setState({data:fetchdata,country:country}); \n}\n  render() {\n    const{data,country}=this.state;\n    return (\n      <div className={styles.Container}>\n        <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\n        <Cards data={data}/>\n        <CountryPicker handleCountryChange={this.handleCountryChange}/>\n        <Chart data={data} country={country}/>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n \n    <App />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__QPfv-\",\"image\":\"App_image__3EZA4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container___Fwya\"};"],"sourceRoot":""}